Basic:
Retrieve the total number of orders placed.
Calculate the total revenue generated from pizza sales.
Identify the highest-priced pizza.
Identify the most common pizza size ordered.
List the top 5 most ordered pizza types along with their quantities.

Solutions:
1.SELECT 
    COUNT(order_id) AS total_orders
FROM
    orders;

2.SELECT 
    ROUND(SUM(orders_details.quantity * pizzas.price),
            2) AS total_sales
FROM
    orders_details
        JOIN
    pizzas ON pizzas.pizza_id = orders_details.pizza_id;

3.SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

4.SELECT 
    pizzas.size,
    COUNT(orders_details.order_details_id) AS order_count
FROM
    pizzas
        JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id
GROUP BY pizzas.size
ORDER BY order_count DESC
LIMIT 1;

5.SELECT 
    pizza_types.name, SUM(orders_details.quantity) AS quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY quantity DESC
LIMIT 5;


Intermediate:
Join the necessary tables to find the total quantity of each pizza category ordered.
Determine the distribution of orders by hour of the day.
Join relevant tables to find the category-wise distribution of pizzas.
Group the orders by date and calculate the average number of pizzas ordered per day.
Determine the top 3 most ordered pizza types based on revenue.

Solutions:
1.SELECT 
    pizza_types.category,
    SUM(orders_details.quantity) AS quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY quantity DESC;

2.SELECT 
    HOUR(order_time) AS hours, COUNT(order_id) AS order_count
FROM
    orders
GROUP BY HOUR(order_time);

3.SELECT category, COUNT(name) FROM pizza_types
GROUP BY category;

4.SELECT 
    ROUND(AVG(quantity), 0) AS avg_pizza_ordered_per_day
FROM
    (SELECT 
        orders.order_date, SUM(orders_details.quantity) AS quantity
    FROM
        orders
    JOIN orders_details ON orders.order_id = orders_details.order_id
    GROUP BY orders.order_date) AS order_quantity;

5.SELECT pizza_types.name, ROUND(SUM(orders_details.quantity * pizzas.price),2) AS revenue

FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN 
orders_details
ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY revenue DESC
LIMIT 3;


Advanced:
Calculate the percentage contribution of each pizza type to total revenue.
Analyze the cumulative revenue generated over time.
Determine the top 3 most ordered pizza types based on revenue for each pizza category.

Solutions:
1.SELECT pizza_types.category, 
ROUND(SUM(orders_details.quantity * pizzas.price)/ (SELECT ROUND(SUM(orders_details.quantity * pizzas.price),2)
FROM orders_details JOIN pizzas
ON orders_details.pizza_id= pizzas.pizza_id)*100,2) AS revenue
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN 
orders_details
ON orders_details.pizza_id = pizzas.pizza_id
group by pizza_types.category
ORDER BY revenue DESC;

OR
1.SELECT pizza_types.category,pizza_types.name,
ROUND(SUM(orders_details.quantity * pizzas.price)/
(SELECT ROUND(SUM(orders_details.quantity * pizzas.price),2) 
FROM orders_details JOIN pizzas
ON orders_details.pizza_id = pizzas.pizza_id)*100,2) AS percent_revenue
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN
orders_details
ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category,pizza_types.name 
ORDER BY percent_revenue DESC;


2.SELECT order_date,
ROUND(SUM(revenue) OVER (ORDER BY order_date),2) AS cum_revenue
FROM
(SELECT orders.order_date,
SUM(orders_details.quantity* pizzas.price) AS revenue
FROM orders JOIN orders_details
ON orders.order_id = orders_details.order_id
JOIN 
pizzas
ON pizzas.pizza_id = orders_details.pizza_id
group by orders.order_date) AS sales_gen;


3.SELECT category,name, revenue FROM 
(SELECT category, name, revenue,
RANK() OVER (PARTITION BY  category ORDER BY revenue DESC) AS rn
FROM
(SELECT pizza_types.category, pizza_types.name,
SUM((orders_details.quantity) * pizzas.price) AS revenue
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN 
orders_details
ON orders_details.pizza_id = pizzas.pizza_id 
group by pizza_types.category, pizza_types.name) AS a) AS b
WHERE rn <=3;
